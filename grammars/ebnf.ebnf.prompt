We are bootstrapping a new system using EBNF grammars.
We want to make an ebnf grammar that is super detailed and self expressive.
Here is the code we wrote so far 
# Terminals support the full range of Unicode. Unicode characters can be specified directly in the grammar, for example hiragana ::= [ぁ-ゟ], or with escapes: 8-bit (\xXX), 16-bit (\uXXXX) or 32-bit (\UXXXXXXXX).

range ::=  "-"

# Character ranges can be negated with ^:

negate ::= "^"

# Alternatives, denoted by |, give different sequences that are acceptable. 

alternationsymbol ::= "|"


#Sequences and Alternatives

# Parentheses () can be used to group sequences, which allows for embedding alternatives in a larger rule or applying repetition and optional symbols (below) to a sequence.

parensopen ::= "("

parensclose ::=  ")"

parens ::= parensopen | parensclose

#Repetition and Optional Symbols

repetitionsymbols ::= repetitionplus | repetitionstar | repetitionoptional

#* after a symbol or sequence means that it can be repeated zero or more times.

repetitionstar ::=  "*" 

#+ denotes that the symbol or sequence should appear one or more times.

repetitionplus ::=  "+" 

#? makes the preceding symbol or sequence optional.

repetitionoptional ::=  "?" 


#Comments and newlines
#Comments can be specified with #:

comment ::= "#" [a-zA-Z0-9 \t]*

# Newlines are allowed between rules and between symbols or sequences nested inside parentheses. Additionally, a newline after an alternate marker | will continue the current rule, even outside of parentheses.

letter ::= [a-zA-Z]

digit ::= [0-9]

spacechar ::= " "
S ::= ( spacechar | "\n" | "\t" | "\r"  )

bracesopen ::= "[" 

bracesclose ::= "]"

bracessymbol ::= bracesopen | bracesclose

quote ::=  "\""

assignment ::= "::="

underscorecharacter ::=  "_"

character ::= letter | digit | symbol | underscorecharacter | spacechar

symbol ::= bracessymbol | parens | quote | assignment | alternationsymbol | range | repetitionsymbols  | negate



# no underscores in these name

identifier ::= letter ( letter | digit  )*

terminal ::= quote character+  quote 

group ::= parensopen S productionrule S parensclose

rangeterm ::=  bracesopen   S   productionrule   S   bracesclose

term ::= group |rangeterm | terminal      | identifier

repetition ::= term   S repetitionsymbols

factornegate ::= negate S factor

factorrange ::= term   S   range   S   term

factor ::= repetition |factorrange | term   S

#The order of symbols in a sequence matter. 

concatenation ::= ( S   factor   S   ? ) +

alternation ::= ( S   concatenation   S   alternationsymbol ? ) +

productionrule ::= alternation


lhs ::= identifier

rule ::= lhs   S   assignment   S   productionrule   S    | comment

root ::= ( S   rule   S ) *
 ENDSRC . Lets rewrite this  EBNF to be more expressive and explicit in its naming but keep the syntax the same for compatibility with GBNF and llama.cpp. 
